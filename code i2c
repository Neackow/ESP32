Data = [1,2,3,4], List_data = lists:flatten(lists:map(fun(X) -> X end, lists:map(fun(X) -> lists:sublist(binary_to_list(term_to_binary(X)),3,8) end, Data))), I2C1 = grisp_i2c:open(i2c1).
grisp_i2c:transfer(I2C1, [{write, 16#40, 1, List_data}]).



Data = term_to_binary([1,2,3,4]).
test = lists:sublist(binary_to_list(term_to_binary([1,2,3,4])),3,8).

f(), Data = [140,1,140,0,3], List_data = lists:flatten(lists:map(fun(X) -> X end, lists:map(fun(X) -> lists:sublist(binary_to_list(term_to_binary(X)),3,8) end, Data))).
I2C1 = grisp_i2c:open(i2c1), grisp_i2c:transfer(I2C1, [{write, 16#40, 1, List_data}]).

Data = [2000,3000,4000,5000].
Data = [16#01,16#02,16#03,16#04].




net_kernel:connect_node(earth@neackow_z4).
net_kernel:connect_node(fries@neackow_z4).

{shell, fries@neackow_z4} ! {hello, from, self()}.
spawn(fries@neackow_z4, fun() -> io:format("I'm on ~p~n", [node()]) end).

erl -sname ketchup@neackow_z4 -setcookie TestingCookie
erl -sname fries@neackow_z4 -setcookie TestingCookie


 -> Fait : nom : movement_detection@nav_1 & movement_detection@nav_2
net_kernel:connect_node(remote_nav_2@neackow_z4). -> fail.

net_adm:ping(movement_detection@nav_2). -> pong then crash. WHEN IN REMOTE.
net_adm:ping(remote_nav_2). -> pang.
net_adm:ping(remote_nav_2@neackow_z4). -> pang.
net_adm:ping(nav_2). -> pang.

rpc:call(movement_detection@nav_2, movement_detection, output_log, [["Test",[5]]]). % DOESN'T WORK.
rpc:call(movement_detection@nav_2, movement_detection, launch, []).
rpc:call(movement_detection@nav_2, movement_detection, stop_all, []).


rpc:call(movement_detection@nav_2, lists, sort, [[a,e,f,t,h,s,a]]). % TO TEST IF RPC:CALL WORKS.
rpc:call(movement_detection@orderCrate, hera_sendOrder, set_state_crate, [testRPC]).


% FOR THE READ.
I2C1 = grisp_i2c:open(i2c1), Message = grisp_i2c:transfer(I2C1, [{read, 16#40, 1, 1}]).
Available = lists:nth(1, binary_to_list(lists:nth(1, Message))).

% OTHER TESTS:
- Send I2C : hera_sendOrder:send_i2c([0,1,0,0,0]).
- Ping : net_adm:ping(movement_detection@orderCrate). 
